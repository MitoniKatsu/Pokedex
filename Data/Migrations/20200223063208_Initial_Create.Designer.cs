// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(PokedexDbContext))]
    [Migration("20200223063208_Initial_Create")]
    partial class Initial_Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.Pokemon", b =>
                {
                    b.Property<int>("PokemonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PokemonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<int>("SpeciesID")
                        .HasColumnType("int");

                    b.HasKey("PokemonID");

                    b.HasIndex("SpeciesID")
                        .IsUnique();

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("Data.Entities.PokemonSpecies", b =>
                {
                    b.Property<int>("SpeciesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EvolutionLevel")
                        .HasColumnType("int");

                    b.Property<int?>("EvolvesFromID")
                        .HasColumnType("int");

                    b.Property<int?>("EvolvesToID")
                        .HasColumnType("int");

                    b.Property<string>("SpeciesDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<int>("SpeciesTypeID")
                        .HasColumnType("int");

                    b.HasKey("SpeciesID");

                    b.HasIndex("EvolvesFromID")
                        .IsUnique()
                        .HasFilter("[EvolvesFromID] IS NOT NULL");

                    b.HasIndex("EvolvesToID")
                        .IsUnique()
                        .HasFilter("[EvolvesToID] IS NOT NULL");

                    b.HasIndex("SpeciesTypeID");

                    b.ToTable("PokemonSpecies");
                });

            modelBuilder.Entity("Data.Entities.PokemonType", b =>
                {
                    b.Property<int>("PokemonTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrimaryTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryTypeID")
                        .HasColumnType("int");

                    b.HasKey("PokemonTypeID");

                    b.HasIndex("PrimaryTypeID")
                        .IsUnique();

                    b.HasIndex("SecondaryTypeID")
                        .IsUnique()
                        .HasFilter("[SecondaryTypeID] IS NOT NULL");

                    b.ToTable("SpeciesType");
                });

            modelBuilder.Entity("Data.Entities.Type", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("TypeID");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Data.Entities.Pokemon", b =>
                {
                    b.HasOne("Data.Entities.PokemonSpecies", "Species")
                        .WithOne()
                        .HasForeignKey("Data.Entities.Pokemon", "SpeciesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.PokemonSpecies", b =>
                {
                    b.HasOne("Data.Entities.PokemonSpecies", "EvolvesFrom")
                        .WithOne()
                        .HasForeignKey("Data.Entities.PokemonSpecies", "EvolvesFromID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Entities.PokemonSpecies", "EvolvesTo")
                        .WithOne()
                        .HasForeignKey("Data.Entities.PokemonSpecies", "EvolvesToID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Entities.PokemonType", "SpeciesType")
                        .WithMany()
                        .HasForeignKey("SpeciesTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.PokemonType", b =>
                {
                    b.HasOne("Data.Entities.Type", "PrimaryType")
                        .WithOne()
                        .HasForeignKey("Data.Entities.PokemonType", "PrimaryTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Type", "SecondaryType")
                        .WithOne()
                        .HasForeignKey("Data.Entities.PokemonType", "SecondaryTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
